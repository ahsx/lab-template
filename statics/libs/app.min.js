angular
	.module('myApp', ['ui.router'])
;
angular
	.module('myApp')
	.config(function($stateProvider, $urlRouterProvider) {

		$urlRouterProvider.otherwise("/options");

		$stateProvider
			.state('options', {
				name: 'options',
				url: '/options',
				templateUrl: '/statics/partials/views/optionsbar/options.html'
			})

			.state('about', {
				name: 'about',
				url: '/about',
				templateUrl: '/statics/partials/views/optionsbar/about.html'
			})
	});
angular
	.module('myApp')
	.controller('OptionsController', 
		function($scope)
		{
			$scope.name = 'Hello';
			$scope.value = 12;

			$scope.add = function()
			{
				$scope.value = $scope.value + 1;
			}
		}
	)
;
angular
	.module('myApp')
	.controller('ToolbarController',
		function($scope, $state){

			console.log($state);
			console.log($state.$current);
			console.log($state.current);
			$scope.state = 'options';
		}
	);
angular
	.module('myApp')
	.directive('dropdown', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: {}, // {} = isolate, true = child, false/undefined = no change
			controller: 
				function($scope, $element, $attrs, $transclude) 
				{
					$scope.title = $attrs.title || "Untitled";
				},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: '/statics/partials/directives/dropdown.html',
			// replace: true,
			transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				
			}
		};
	}]);
angular
	.module('myApp')
	.directive('range', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: {}, // {} = isolate, true = child, false/undefined = no change
			controller:
				function($scope, $element, $attrs, $transclude) 
				{
					$scope.min = $attrs.min || 0;
					$scope.max = $attrs.max || 10;
					$scope.value = $attrs.value || 0;
					$scope.title = $attrs.title;

					$scope.plus = function()
					{
						var n = ($scope.value | 0) + 1;
						$scope.value = Math.min( n, $attrs.max );
					}

					$scope.minus = function()
					{
						var n = ($scope.value | 0) - 1;
						$scope.value = Math.max( n, $attrs.min );
					}
				},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: '/statics/partials/directives/range.html',
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			// link: function($scope, iElm, iAttrs, controller) {
				
			// }
		};
	}]);
angular
	.module('myApp')
	.directive('switch', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: {}, // {} = isolate, true = child, false/undefined = no change
			controller: 
				function($scope, $element, $attrs, $transclude) 
				{
					$scope.title = $attrs.title;
					$scope.labelOn = $attrs.labelon; // labelon instead of labelOn because always arrive as minuscule
					$scope.labelOff = $attrs.labeloff; // same as above
					$scope.isOn = $attrs.on || false;
				},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: '/statics/partials/directives/switch.html',
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			// link: function($scope, iElm, iAttrs, controller) {
			// }
		};
	}]);
angular
	.module('myApp')
	.service('OptionsService', function()
	{
	
	})